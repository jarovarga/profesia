<?php

declare(strict_types=1);

namespace App\View;

use App\View\Helper\MenuHelper;
use Authentication\View\Helper\IdentityHelper;
use Cake\Core\Configure;
use Cake\Event\EventManager;
use Cake\View\View;

/**
 * @property MenuHelper $Menu
 * @property IdentityHelper $Identity
 */
class AppView extends View
{
    /**
     * Perform actions after the layout has been rendered.
     *
     * This method is called after the layout has been rendered.
     * It checks if the response type is 'text/html' and the debug mode is not enabled.
     * If both conditions are met, it sanitizes the HTML content retrieved from the layout's 'content' block.
     * The sanitized content is then assigned to the 'content' variable.
     *
     * @return void
     */
    public function afterLayout(): void
    {
        if ($this->getResponse()->getType() === 'text/html' && Configure::read('debug') !== true) {
            $this->assign('content', $this->sanitizeHtml($this->fetch('content')));
        }
    }

    /**
     * Initialize the application.
     *
     * This method is called when the application is first initialized. It sets up various
     * configurations and components.
     *
     * The following actions are performed by this method:
     * - Calls the `setupEvents()` method to set up event listeners.
     * - Calls the `initHelpers()` method to initialize helpers.
     * - Calls the `setupPaginatorTemplates()` method to set up templates for pagination.
     * - Calls the `setupHtmlTemplates()` method to set up HTML templates.
     * - Calls the `setupFormTemplates()` method to set up form templates.
     *
     * @return void
     */
    public function initialize(): void
    {
        $this->setupEvents();
        $this->initHelpers();
        $this->setupPaginatorTemplates();
        $this->setupHtmlTemplates();
        $this->setupFormTemplates();
    }

    /**
     * Set up the events for the current class.
     *
     * This method registers the `afterLayout` method of the current class as a callback for the `View.afterLayout` event.
     * The `afterLayout` method will be called after the layout file has been rendered.
     *
     * @return void
     */
    private function setupEvents(): void
    {
        EventManager::instance()->on('View.afterLayout', [$this, 'afterLayout']);
    }

    /**
     * Initialize the helpers for the current class.
     *
     * This method loads the following helpers:
     * - `Menu` - The helper for generating menu structures.
     * - `Authentication.Identity` - The helper for managing user authentication.
     *
     * It also configures the `Form` helper by setting the `autoSetCustomValidity` option to `false`.
     *
     * @return void
     */
    private function initHelpers(): void
    {
        $this->loadHelper('Menu');
        $this->loadHelper('Authentication.Identity');

        $this->Form->setConfig(['autoSetCustomValidity' => false]);
    }

    /**
     * Set up the paginator templates for the `Paginator` class.
     *
     * The templates are used to customize the HTML markup generated by the `Paginator` class.
     * This method sets the following templates:
     * - `sortAsc` - The HTML template for the ascending sort link.
     * - `sortDesc` - The HTML template for the descending sort link.
     * - `counterPages` - The translated text for displaying the number of records in the table.
     * - `number` - The HTML template for rendering a numbered page link.
     * - `current` - The HTML template for the current active page.
     * - `ellipsis` - The HTML template for the page number ellipsis.
     *
     * @return void
     */
    private function setupPaginatorTemplates(): void
    {
        $this->Paginator->setTemplates([
            'sortAsc' => /** @lang text */ '<a href="{{url}}" class="sort --asc">{{text}}</a>',
            'sortDesc' => /** @lang text */ '<a href="{{url}}" class="sort --desc">{{text}}</a>',
            'counterPages' => __x('table', '{{start}} to {{end}} of {{count}} records'),
            'number' => /** @lang text */ '<li class="numbers__item"><a href="{{url}}">{{text}}</a></li>',
            'current' => /** @lang text */ '<li class="numbers__item --is-active">...</li>',
            'ellipsis' => /** @lang text */ '<li class="numbers__item --ellipsis"><span>...</span></li>',
        ]);
    }

    /**
     * Set up the HTML templates for the `Html` class.
     *
     * The templates are used to customize the HTML markup generated by the `Html` class.
     * This method sets the following templates:
     * - `charset` - The HTML template for the charset meta tag.
     * - `css` - The HTML template for the CSS link tag.
     * - `image` - The HTML template for the image tag.
     * - `javascriptlink` - The HTML template for the JavaScript link tag.
     * - `meta` - The HTML template for the meta tag.
     * - `metalink` - The HTML template for the link tag.
     *
     * @return void
     */
    private function setupHtmlTemplates(): void
    {
        $this->Html->setTemplates([
            'charset' => /** @lang text */ '<meta charset="{{charset}}">',
            'css' => /** @lang text */ '<link href="{{url}}" rel="{{rel}}"{{attrs}}>',
            'image' => /** @lang text */ '<img src="{{url}}"{{attrs}}>',
            'javascriptlink' => /** @lang text */ '<script src="{{url}}"{{attrs}}></script>',
            'meta' => /** @lang text */ '<meta{{attrs}}>',
            'metalink' => /** @lang text */ '<link href="{{url}}"{{attrs}}>',
        ]);
    }

    /**
     * Set up the form templates for the `Form` class.
     *
     * The templates are used to customize the HTML markup generated by the `Form` class.
     * This method sets the following templates:
     * - `submitContainer` - The HTML template for the submit button container.
     * - `inputContainer` - The HTML template for the input field container.
     * - `inputContainerError` - The HTML template for the input field container when there is an error.
     * - `input` - The HTML template for the input field.
     * - `error` - The HTML template for the error message.
     * - `selectedClass` - The CSS class for the selected elements.
     * - `requiredClass` - The CSS class for the required elements.
     *
     * @return void
     */
    private function setupFormTemplates(): void
    {
        $this->Form->setTemplates([
            'submitContainer' => /** @lang text */ '<div class="form__input --submit">{{content}}</div>',
            'inputContainer' => /** @lang text */ '<div class="form__input --{{type}}{{required}}">{{content}}</div>',
            'inputContainerError' => /** @lang text */
                '<div class="form__input --{{type}}{{required}}">{{content}}{{error}}</div>',
            'input' => /** @lang text */ '<input type="{{type}}" name="{{name}}"{{attrs}}>',
            'error' => /** @lang text */ '<div class="form__input --error">{{content}}{{error}}</div>',
            'selectedClass' => '--is-selected',
            'requiredClass' => '--is-required',
        ]);
    }

    /**
     * Sanitizes the given HTML string by removing any line breaks, excessive whitespace, and HTML comments.
     *
     * @param string $subject The HTML string to sanitize.
     *
     * @return string The sanitized HTML string.
     */
    private function sanitizeHtml(string $subject): string
    {
        $pattern = ['/[\r\t\n]/', '/\s\s+/', '/<!--(.*?)-->/'];

        return preg_replace($pattern, '', $subject) . "\n";
    }
}
